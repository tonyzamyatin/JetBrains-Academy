package tictactoe;
import java.util.Scanner;  // Import the Scanner class

public class Main {    
    static String checkGameState (char[] state) {
        int countX = 0;
        int countO= 0;
        int countEmpty = 0;
        int[] tir = {0, 0}; // tir[0] are the times X has "three in a row" and tir[1] the times O has tir.
    
        // Check whether there are a lot more X's than O's or vice versa.
        for (char cell: state) {
            if (cell == 'X') {
                countX++;
            } else if (cell == 'O') {
                countO++;
            } else if (cell == '_') {
                countEmpty++;
            }
        }
        if (Math.abs(countX-countO) > 1) {
            return "Impossible";
        }

        // Create two dimensional array.
        char[][] grid = new char[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j= 0; j < 3; j++) {
                grid[i][j] = state[i * 3 + j];
            }
        }

        // Check for "three in a row":
        // Check horizontal.
        for (int i = 0; i < 3; i++) {
            if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2]) {
                if (grid[i][0] == 'X') {
                    tir[0]++;
                } else if (grid[i][0] == 'O') {
                    tir[1]++;
                }
            }  
        }
        // Check vertical.
        for (int i = 0; i < 3; i++) {
            if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i]) {
                if (grid[0][i] == 'X') {
                    tir[0]++;
                } else if (grid[0][i] == 'O') {
                    tir[1]++;
                }
            }
        }

        // Check for diagnonals:
            //First diagonal
        if (grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2]) {
            if (grid[1][1] == 'X') {
                    tir[0]++;
            } else if (grid[1][1] == 'O') {
                tir[1]++;
            }
        }
            //Second diagonal
        if (grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2]) {
            if (grid[1][1] == 'X') {
                    tir[0]++;
            } else if (grid[1][1] == 'O') {
                tir[1]++;
            }
        }

        // Evaltuate tir to identify winner or impossible state.
        if (tir[0] + tir[1] > 1){
            return "Impossible";  //There can't be more than one winner.
        } else if (tir[0] == 1) {
            return "X wins";
        } else if (tir[1] == 1) {
            return "O wins";
        } 

        // Check whether grid is full. Standard return value in this case is "Draw".
        if (countEmpty == 0) {
            return "Draw";
        }
        
        // Standard return value
        return "Game not finished";
    }

    static boolean checkMove (int[] m, char[] state) {
        if ((m[0] < 0 || m[1] < 0) || (m[0] > 2 || m[1] > 2)) {
            System.out.println("Coordinates should be from 1 to 3!");
            return false;
        }
        // Create two dimensional array.
        char[][] grid = new char[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j= 0; j < 3; j++) {
                grid[i][j] = state[i * 3 + j];
            }
        }

        if(grid[m[0]][m[1]] == '_') {
            System.out.println("This cell is occupied! Choose another one!");
            return false;
        }
        return true;
    }
    
    public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    char[] stage = new char[9];
    String line = scanner.next();
    for (int i = 0; i < stage.length; i++) {
        stage[i] = line.charAt(i);
    }
    
    System.out.println("---------");
    System.out.println("| " + stage[0] + " " + stage[1] + " " + stage[2] + " |");
    System.out.println("| " + stage[3] + " " + stage[4] + " " + stage[5] + " |");
    System.out.println("| " + stage[6] + " " + stage[7] + " " + stage[8] + " |");
    System.out.println("---------");
    
    // System.out.println(checkGameState(stage));
        
    int[] move = new int[2];
    boolean legit = false;
    do {
        try{
            move[0] = scanner.nextInt();
            move[1] = scanner.nextInt();
        } catch (Exception e) {
            System.out.println("You should enter numbers!");
            legit = false;
            continue;
        }
        // Turn into coordinate format matching the one of the grid array.
        move[0]--;
        move[1]--;
        legit = checkMove(move, stage);
    } while (legit == false);
        
    int x = move[0];
    int y = move[1];
    
    stage[x*3 + y] = 'X';
    System.out.println("---------");
    System.out.println("| " + stage[0] + " " + stage[1] + " " + stage[2] + " |");
    System.out.println("| " + stage[3] + " " + stage[4] + " " + stage[5] + " |");
    System.out.println("| " + stage[6] + " " + stage[7] + " " + stage[8] + " |");
    System.out.println("---------");
    
    
    }
}